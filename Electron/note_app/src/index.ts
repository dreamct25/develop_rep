import { app, BrowserWindow, Menu, ipcMain, IpcMainEvent } from 'electron';
import './server/server_config'
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    resizable:true,
    frame:false,
    transparent: true,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
    }
  });

  const settingWindow = new BrowserWindow({
    height: 580,
    width: 300,
    // resizable: false,
    frame: false,
    transparent: true,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false
    }
  })

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  settingWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY.replace('main_window', 'setting_window'))

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
  settingWindow.webContents.openDevTools()

  settingWindow.hide()

  ipcMain.on('showRightMenu', () => {
    const rightM = Menu.buildFromTemplate([
      {
        label: 'clear all',
        click: () => mainWindow.webContents.send('deleteItem')
      },
      {
        label: 'setting',
        click: () => {
          settingWindow.show()
        }
      }
    ]);
    rightM.popup({});
  })

  ipcMain.on('closeWindow', () => settingWindow.hide())
  ipcMain.on('settingNoteContent', (event, value) => mainWindow.webContents.send('getSettingNoteContent', value))
  ipcMain.on('setPosition', (event: IpcMainEvent, { dragX, dragY }: { dragX: number, dragY: number }) => settingWindow.setPosition(dragX, dragY))
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
