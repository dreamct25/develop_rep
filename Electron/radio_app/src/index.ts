import { app, BrowserWindow, ipcMain, IpcMainEvent, Menu, MenuItem, MenuItemConstructorOptions } from 'electron';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {

  process.setMaxListeners(20)

  require('./server/server_config')

  // Create the loading browser window.
  const loadingWindow = new BrowserWindow({
    width: 300,
    height: 300,
    frame: false,
    transparent:true,
    show:false,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
    }
  });

  loadingWindow.once('show',() => {
    // Create the main browser window.
    const mainWindow = new BrowserWindow({
      width: 1280,
      height: 720,
      frame: false,
      transparent: true,
      show:false,
      webPreferences: {
        nodeIntegration: true,
        contextIsolation: false,
        webSecurity: false
      }
    });

    mainWindow.once('ready-to-show',() => {
      setTimeout(() => {
        loadingWindow.webContents.send('closeLoading',false)
        setTimeout(() => {
          loadingWindow.hide()
          loadingWindow.close()
          setTimeout(() => mainWindow.show(),300)
        },501)
      },500)
    })
  
    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  
    const mainMenuSet: MenuItem[] | MenuItemConstructorOptions[] = [{
      label: 'File', // 程式上方選單文字
      accelerator: process.platform === 'darwin' ? 'Command+Q' : 'Ctrl+Q', // 快捷鍵，darwin 是 Mac 平台，win32 是 Windows 平台
      submenu: [{ // 當前選單文字底下的子選單
        label: 'Quit', // 子選單文字
        click() { // 點擊事件
          app.quit() // 關閉程式
        }
      }]
    }]
  
    if (process.env.NODE_ENV === 'production') {
      mainMenuSet.push({
        label: 'Help',
        submenu: [{
          label: 'About',
          click() { mainWindow.webContents.send('getCopyrightInfo') }
        }]
      })
    } else {
      mainMenuSet.push({
        label: 'Help',
        submenu: [{
          label: 'About',
          click() { mainWindow.webContents.send('getCopyrightInfo') }
        },
        {
          label: 'Dev Toolse',
          accelerator: 'F12',
          click() { mainWindow.webContents.toggleDevTools() }
        }, {
          role: 'reload'
        }]
      })
    }
  
    process.platform === 'darwin' && mainMenuSet.unshift({ label: '' })
  
    const mainMenu: Menu = Menu.buildFromTemplate(mainMenuSet)
  
    Menu.setApplicationMenu(mainMenu)
  
    ipcMain.on('setPosition', (event: IpcMainEvent, { dragX, dragY }: { dragX: number, dragY: number }) => mainWindow.setPosition(dragX, dragY))
  
    ipcMain.on('setFullscreen', (event: IpcMainEvent, value: boolean) => mainWindow.setFullScreen(value))
    
    ipcMain.on('setMinScreen', () => mainWindow.minimize())
    
    ipcMain.on('closeApp', () => app.quit())
  })

  loadingWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY.replace('main_window','loading_window'))

  loadingWindow.show()
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
